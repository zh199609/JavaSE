lambda其实就是为@FunctionalInterface服务的，能够用一种全新的、简洁的语法创建函数式接口的对象。
当然如果一个接口不符合函数式接口的定义，是不能通过lambda表达式来创建其对象的。
lambda其实就是定义入参、函数体、返回值，然后可以生成任意一个接口(符合该函数入参和返回值的函数式接口)的对象。

1、入参的类型是可以省略的（当然加上也没有问题），因为可以从上下文环境中推断出lambda表达式的参数类型。
2.没有入参的时候，比如上面的Runnable接口，直接用()代表无参数。
3.当lambda表达式的参数个数只有一个，可以省略小括号。
4.当lambda表达式只包含一条语句时，可以省略大括号、return和语句结尾的分号。



(1).静态方法引用

格式：ClassName::staticMethodName，比如：

String::valueOf   等价于lambda表达式 (s)  -> String.valueOf(s)

Math::pow          等价于lambda表达式 (x, y) -> Math.pow(x, y)

@FunctionalInterface
public interface MyInterface {
 
    public double calculate(double a, double b);
}

// 静态方法引用pow
MyInterface ins1 = Math::pow;
System.out.println(ins1.calculate(2, 4) == 16);
 
// 静态方法引用max
MyInterface ins2 = Math::max;
System.out.println(ins2.calculate(2, 4) == 4);


(2).实例方法引用    可以看到我们实现的效果：定义一个函数式接口，它的方法与原始的concat拥有同样的参数类型和返回值，相当于是给concat重新命名。
格式：instanceReference::methodName，比如：

str::toString  等价于lambda表达式 ()  ->  str.toString()

str::concat    等价于lambda表达式 (another)  ->  str.concat(another)
--------------------- 
@FunctionalInterface
public interface MyInterface {
    // 与String.concat()同样的入参和返回值
    public String transform(String input);
}

String content = "abc";
// 引用String类的实例方法
MyInterface ins1 = content::concat;
System.out.println(ins1.transform("def"));// abcdef


jdk中的函数式接口。。
java.lang.Runnable,

java.awt.event.ActionListener, 

java.util.Comparator,

java.util.concurrent.Callable

java.util.function包下的接口，如Consumer、Predicate、Supplier等



